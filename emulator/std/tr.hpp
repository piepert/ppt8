#ifndef EMULATOR_TR_HPP
#define EMULATOR_TR_HPP

#include <map>
#include <string>

std::map<std::string, int> TRANSLATION = {
    { "mov_rr", 1 },
    { "mov_rv", 2 },
    { "mov_mr", 3 },
    { "mov_ss", 4 },
    { "mov_ms", 5 },
    { "mov_sv", 6 },
    { "mov_mv", 7 },
    { "mov_mm", 8 },
    { "mov_imv", 9 },
    { "mov_irm", 10 },
    { "mov_rm", 11 },
    { "mov_imr", 12 },
    { "mov_sm", 13 },
    { "mov_irs", 14 },
    { "call", 15 },
    { "mov_axv", 16 },
    { "mov_bxv", 17 },
    { "mov_cxv", 18 },
    { "mov_dxv", 19 },
    { "mov_exv", 20 },
    { "mov_fxv", 21 },
    { "mov_gxv", 22 },
    { "mov_hxv", 23 },
    { "mov_axr", 24 },
    { "mov_bxr", 25 },
    { "mov_cxr", 26 },
    { "mov_dxr", 27 },
    { "mov_exr", 28 },
    { "mov_fxr", 29 },
    { "mov_gxr", 30 },
    { "mov_hxr", 31 },
    { "alloc", 32 },
    { "int_v", 33 },
    { "int_r", 34 },
    { "int_s", 35 },
    { "int_m", 36 },
    { "push8_s", 37 },
    { "push8_m", 38 },
    { "push8_v", 39 },
    { "push16_r", 40 },
    { "push16_m", 41 },
    { "push16_v", 42 },
    { "pop8_s", 43 },
    { "pop8_m", 44 },
    { "pop16_r", 45 },
    { "pop16_m", 46 },
    { "ret", 47 },
    { "add_rr", 48 },
    { "add_rv", 49 },
    { "add_rm", 50 },
    { "add_mr", 51 },
    { "add_mv", 52 },
    { "add_rs", 53 },
    { "add_ms", 54 },
    { "add_sv", 55 },
    { "sub_rr", 56 },
    { "sub_rv", 57 },
    { "sub_rm", 58 },
    { "sub_mr", 59 },
    { "sub_mv", 60 },
    { "sub_rs", 61 },
    { "sub_ms", 62 },
    { "sub_sv", 63 },
    { "mul_rr", 64 },
    { "mul_rv", 65 },
    { "mul_rm", 66 },
    { "mul_mr", 67 },
    { "mul_mv", 68 },
    { "mul_rs", 69 },
    { "mul_ms", 70 },
    { "mul_sv", 71 },
    { "div_rr", 72 },
    { "div_rv", 73 },
    { "div_rm", 74 },
    { "div_mr", 75 },
    { "div_mv", 76 },
    { "div_rs", 77 },
    { "div_ms", 78 },
    { "div_sv", 79 },
    { "inc8_s", 80 },
    { "inc8_m", 81 },
    { "inc16_r", 82 },
    { "inc16_m", 83 },
    { "dec8_s", 84 },
    { "dec8_m", 85 },
    { "dec16_r", 86 },
    { "dec16_m", 87 },
    { "cmp_rm", 88 },
    { "cmp_sm", 89 },
    { "cmp_mv", 90 },
    { "cmp_sv", 91 },
    { "cmp_rv", 92 },
    { "jmp_v", 93 },
    { "jmp_r", 94 },
    { "jmp_m", 95 },
    { "je_v", 96 },
    { "je_r", 97 },
    { "je_m", 98 },
    { "jl_v", 99 },
    { "jl_r", 100 },
    { "jl_m", 101 },
    { "jg_v", 102 },
    { "jg_r", 103 },
    { "jg_m", 104 },
    { "jn_v", 105 },
    { "jn_r", 106 },
    { "jn_m", 107 },
    { "and_rr", 108 },
    { "and_ss", 109 },
    { "and_rv", 110 },
    { "and_sv", 111 },
    { "or_rr", 112 },
    { "or_ss", 113 },
    { "or_rv", 114 },
    { "or_sv", 115 },
    { "not_rr", 116 },
    { "not_ss", 117 },
    { "not_rv", 118 },
    { "not_sv", 119 },
    { "nand_rr", 120 },
    { "nand_ss", 121 },
    { "nand_rv", 122 },
    { "nand_sv", 123 },
    { "nor_rr", 124 },
    { "nor_ss", 125 },
    { "nor_rv", 126 },
    { "nor_sv", 127 },
    { "xor_rr", 128 },
    { "xor_ss", 129 },
    { "xor_rv", 130 },
    { "xor_sv", 131 },
    { "mov_irr", 132 },
    { "mov_irv", 133 },
    { "mov_rir", 134 },
    { "mov_sir", 135 },
    { "mov_mir", 136 },
    { "add_ss", 137 },
    { "sub_ss", 138 },
    { "mul_ss", 139 },
    { "div_ss", 140 },
    { "mov_axm", 141 },
    { "mov_bxm", 142 },
    { "mov_cxm", 143 },
    { "mov_dxm", 144 },
    { "mov_exm", 145 },
    { "mov_fxm", 146 },
    { "mov_gxm", 147 },
    { "mov_hxm", 148 },
    { "cmp_mm", 149 },  /*,

    { "ax", 1 },
    { "bx", 2 },
    { "cx", 3 },
    { "dx", 4 },
    { "ex", 5 },
    { "fx", 6 },
    { "gx", 7 },
    { "hx", 8 },

    { "al", 1 },
    { "bl", 2 },
    { "cl", 3 },
    { "dl", 4 },
    { "el", 5 },
    { "fl", 6 },
    { "gl", 7 },
    { "hl", 8 },

    { "ah", 9 },
    { "bh", 10 },
    { "ch", 11 },
    { "dh", 12 },
    { "eh", 13 },
    { "fh", 14 },
    { "gh", 15 },
    { "hh", 16 }*/
};

std::string disassemble_opcode(uint8_t opcode)
{
    std::map<std::string, int>::iterator it;
    for (it = TRANSLATION.begin(); it != TRANSLATION.end(); it++)
    {
        if (it->second == opcode)
            return it->first;
    }

    return "UNKNOWN";
}

#endif //EMULATOR_TR_HPP
